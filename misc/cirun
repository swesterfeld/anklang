#!/usr/bin/env bash
# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0
set -Eeuo pipefail #-x

SCRIPTNAME=${0##*/} && die() { [ -z "$*" ] || echo "$SCRIPTNAME: $*" >&2; exit 127 ; }
ABSPATHSCRIPT=`readlink -f "$0"`&& ABSDIR=`readlink -f "${ABSPATHSCRIPT%/*}"`

help() {
  echo "Usage: $0 [OPTIONS] [commandâ€¦]"
  echo 'Build docker image cirun:$CITAG and run command under mountpoint /cirun/.'
  echo 'Options:'
  echo '  -B              Force docker build even if tag exists'
  echo '  -C DIR          Change to DIR before performing any operations'
  echo '  -u UID          User ID used inside docker run'
  echo '  -x              Enable `set -x` to echo all commands before execution'
  echo 'Commands:'
  echo '  build [dcache]  Build image cirun:$CITAG from Dockerfile.$CITAG with an'
  echo '                  optional directory [dcache] to use as docker image cache'
  echo '  dir2vol <dir>   Copy <dir> contents to $CIVOLUME'
  echo '  vol2dir <dir>   Copy $CIVOLUME contents to <dir>'
  echo '  rmvol           Remove volume without copying its contents'
  echo '  ...             Any other executable shell command'
  echo 'Environemt variables:'
  echo '  CITAG=<tag>     Build image cirun:<tag> from Dockerfile.<tag>'
  echo '  CIVOLUME=<name> Name of the data volume for the build tree'
  echo '  GITHUB_JOB      Used to construct $CIVOLUME fallback'
  exit 0
}

# Parse OPTIONS
DOCKERUID=1000 # hard coded in Dockerfile
FORCE_BUILD=false
test $# -eq 0 && help
while test $# -ne 0 ; do
  case "$1" in \
    -B)			FORCE_BUILD=true ;;
    -C)			shift ; mkdir -p "$1" && echo "cd $1" >&2 && cd "$1" ;;
    -h|--help)		help ;;
    -u)			shift; DOCKERUID="$1" ;;
    -x)			set -x ;;
    *)			break ;;
  esac
  shift
done
test -n "$CITAG"
test -n "${CIVOLUME:-}" || CIVOLUME=cirun-${GITHUB_JOB:-$CITAG}

# Build or check existing docker image
if test "build" == "${1:-}" ; then
  docker image inspect --format=1 cirun:$CITAG >/dev/null 2>&1 &&
    { echo "$0: found 'cirun:$CITAG' - reusing existing image"; exit 0; }
  # Utilize CI cache dir when present
  CACHETYPE=
  if test -n "${2:-}" ; then
    # Use cache-from XOR cache-to, so buildx cannot mess up good caches
    test -r "$2/index.json" &&
      CACHETYPE="--cache-from=type=local,src=$2" ||
	CACHETYPE="--cache-to=type=local,mode=max,compression=zstd,dest=$2"
  fi
  # Require buildx backend
  docker buildx >/dev/null 2>&1 || die "missing docker-buildx-plugin"
  # Build image and cleanup temporary driver
  (
    trap "docker buildx rm    --builder cirunsh$$ 2>/dev/null" 0 HUP INT QUIT TRAP USR1 PIPE TERM ERR EXIT
    set -x
    docker buildx create   --name cirunsh$$ --driver=docker-container
    time docker buildx build --builder cirunsh$$ $CACHETYPE --load -t cirun:$CITAG -f "$ABSDIR/Dockerfile.$CITAG" "$ABSDIR/"
  )
  exit 0
elif ! docker image inspect --format=1 cirun:$CITAG >/dev/null 2>&1; then
  die "cirun:$CITAG: no such docker image, try: $0 build"
fi

# Copy host dir -> container volume
if test "dir2vol" == "${1:-}" ; then
  docker volume ls -q | grep -Fxq $CIVOLUME && {
    docker stop "cirun_$CITAG" || :
    docker rm "cirun_$CITAG" || :
    docker volume rm $CIVOLUME
  }
  docker volume create $CIVOLUME
  docker create --name "cirun_$CITAG" -v $CIVOLUME:/cirun "cirun:$CITAG"
  tar -cf - "$2" | docker cp - "cirun_$CITAG:/cirun"
  docker rm "cirun_$CITAG"
  docker run -t --rm --name "cirun_$CITAG" -v $CIVOLUME:/cirun -w / -u 0:0 "cirun:$CITAG" /usr/bin/chown -R "$DOCKERUID:$DOCKERUID" /cirun
  exit 0
fi

# Move container volume -> host dir
if test "vol2dir" == "${1:-}" ; then
  docker volume ls -q | grep -Fxq $CIVOLUME ||
    die "$0: no such volume: $CIVOLUME"
  mkdir -p "$2"
  docker create --name "cirun_$CITAG" -v $CIVOLUME:/cirun "cirun:$CITAG"
  docker cp "cirun_$CITAG:/cirun/." - | tar -xf - -C "$2"
  docker rm "cirun_$CITAG"
  exit 0
elif test "rmvol" == "${1:-}" ; then
  docker volume rm $CIVOLUME || :
  exit 0
fi

# Prepare $RUNARGS
RUNARGS="-t -w /cirun -v $CIVOLUME:/cirun"
#RUNARGS="$RUNARGS -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix:ro -v $HOME/.Xauthority:/home/builder/.Xauthority:ro"	# X11 connect
#RUNARGS="$RUNARGS --net host"	# needed to connect to AnklangSynthEngine *outside* docker
#RUNARGS="$RUNARGS -e DBUS_SESSION_BUS_ADDRESS=$DBUS_SESSION_BUS_ADDRESS -v /run/user/1000/bus:/run/user/1000/bus -v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket"
#RUNARGS="$RUNARGS --privileged --cap-add SYS_ADMIN --device /dev/fuse -v /var/run/docker.sock:/var/run/docker.sock"		# run as root with fuse, docker
tty -s && INTERACTIVE="-i" || INTERACTIVE=
RUN="docker run --rm $INTERACTIVE $RUNARGS -u $DOCKERUID:$DOCKERUID cirun:$CITAG"

# Run user provided command
set -x
exec $RUN "$@"
